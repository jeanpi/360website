I had a class last quarter that was based on creating your own game (board or video game). Each person was assigned a partner and from there you and your partner could decide what type of game you wanted to create. My partner and I decided to create a board game, much time and work was put into the project (mainly by myself) and it was completed by the time required. The quality of the game the good, the project itself got 100% (grade wise) and was played by multiple students even after the quarter ended. But the progress along the way of creating the board game was very sloppy, and took a lot more work than what was actually necessary. The method I was using was code and fix. I did not find it to be effective (mainly because my partner and I did not get along) because when we tried to fix what what was wrong with the game, we could not agree on a similar way to fix the problem.

On a personnel basis I like to use waterfall. In the past, during my 162 class, we had to make a game on our own using everything we learned throughout the quarter. I first wrote down and analyzed all the topics/methods and different functions I have learned in class. By doing so, I saw that I would have to design a game that would rely on a lot of sorting and and reading from files. I designed a game of "hang man" that would select a random word from a text file that had over 30 words. As soon as the user started the game a timer would start, once the player finished (win or lose) the timer would end. The time was then recorded (only if they won) and the option "play again" would pop up. The sorting came in to place the highest scores which was based off of the fastest time. Using water fall for my "hang man" game worked very well and was easy to follow. I basically used the 5 points in water fall: analyze, design, construction, test and deploy; as due dates for myself and by doing that it gave me a good idea of how I should use my time.

